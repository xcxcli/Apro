diff --git a/Apro.js b/Apro.js
index bb983dc..b93dbb4 100644
--- a/Apro.js
+++ b/Apro.js
@@ -2,17 +2,6 @@ let toString=Object.prototype.toString;
 let isFunction=obj=>typeof obj==="function";//toString.call(obj)==="[object Function]"
 let isThenable=obj=>(typeof obj==="function"||typeof obj==="object")&&obj!==null&&typeof obj.then==="function";
 
-let tryThenable=(promise,obj,cb)=>{
-	let waitID=++promise.waitID;
-	if(obj===null||(typeof obj!=="object"&&typeof obj!=="function"))return false;
-	try{
-		let then=obj.then;
-		if(typeof then!=="function")return false;
-		cb(then,waitID);
-	}
-	catch(e){promise._reject(e,waitID);}
-	return true;
-};
 class Apro{
 	callbacks=[]
 	state="pending"
@@ -56,28 +45,40 @@ class Apro{
 		});
 	}
 	waitID=0
+	_thenable(obj,isThenable,notThenable,error){
+		let waitID=++this.waitID;
+		if(obj===null||(typeof obj!=="object"&&typeof obj!=="function"))return notThenable();
+		try{
+			let then=obj.then;
+			if(typeof then!=="function")return notThenable();
+			return isThenable(then,waitID);
+		}
+		catch(e){return error(e,waitID);}//{promise._reject(e,waitID);}
+	}
 	_resolve(value,ID=0){
 		if(this.state!=="pending"||this.waitID!==ID)return;
 		if(value===this){
 			this._reject(new TypeError("Cyclic Promise"));
 			return;
 		}
-		if(tryThenable(this,value,(then,waitID)=>{
+		this._thenable(value,(then,waitID)=>{
 			then.call(value,v=>{
 				this._resolve(v,waitID);
 			},v=>{
 				this._reject(v,waitID);
 			})
-		}))return;
-		this.state="fulfilled";
-		this.value=value;
-		this.callbacks.forEach(callback=>this._handle(callback));
+		},()=>{
+			this.state="fulfilled";
+			this.value=value;
+			this.callbacks.forEach(callback=>this._handle(callback));
+		},(e,waitID)=>{
+			this._reject(e,waitID);
+		});
 	}
 	_reject(error,ID=0){
 		if(this.state!=="pending"||this.waitID!==ID)return;
 		this.state="rejected";
 		this.value=error;
-		//console.log("REJECTED");
 		this.callbacks.forEach(callback=>this._handle(callback));
 	}
 	static resolve(value){
